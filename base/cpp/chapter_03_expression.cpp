//
// Created by issuser on 2019/7/18 0018.
//
/**
 * 第三章 表达式与语句
 *
 *
 */
#include "chapter_03_expression.h"
#include <iostream>
using namespace std;
/**
 * 3.1运算符
 *
 * 3.1.1算术运算符
算术运算主要指常用的加(+)、减(-)、乘(*)、除(/)四则运算。
3.1.2关系运算符
关系运算主要是对两个对象进行比较，运算结果是逻辑常量真或假。
3.1.3逻辑运算符
逻辑运算符是对真和假这两种逻辑值进行运算，运算后的结果仍是一个逻辑值。
3.1.4赋值运算符
赋值运算符分为简单赋值运算符和复合赋值运算符
3.1.5位运算
位运算符有位逻辑与、位逻辑或、位逻辑异或和取反运算符
3.1.6移位运算符
移位运算有两个，分别是左移<<和右移>>，这两个运算符都是双目的。
3.1.7 sizeof运算符
sizeof(类型说明符)sizeof(表达式)功能是返回数据类型在内存中占用的字节数。
3.1.8条件运算符
条件运算符是C++语言中仅有的一个三目运算符 <表达式1>？<表达式2>：<表达式3>
3.1.9逗号运算符
逗号运算符的优先级别最低，结合方向自左至右，其功能是把两个表达式连接起来组成一个表达式。
 */
void Operator(){
    cout<<1+2-3*4/5 <<endl;
    cout<<(1==1) <<endl;
    cout<<(true||false) <<endl;
    cout<<(2<<3)<<endl;
    cout<< sizeof(1) <<endl;
    cout<<(1+2<3?1:2)<<endl;
    int a=1,b=2,c=3;
    cout<<a+b+c<<endl;

}
/**
 * 3.2优先级
 * 高优先级>低优先级
 * 优先级相同 从左往右执行
 * （）改变优先级 （）优先级最高
 */
void Priority(){
    cout<<1+2-3*4/5 <<endl;
    cout<<(1+2-3)*4/5 <<endl;
}
/**
 * 3.3 表达式
 *
 * 3.3.1算术表达式
算术表达式由算术运算符把表达式连接而成
3.3.2关系表达式
关系表达式一般只出现在三目运算符、if 语句和循环语句的判断条件中。
3.3.3条件表达式
条件表达式的一般形式如下：关系表达式？表达式：表达式
3.3.4赋值表达式
由于赋值运算符的结合性是从右至左，因此可以出现连续赋值的表达式。
3.3.5逻辑表达式
逻辑表达式用逻辑运算符将关系表达式连接起来。
对于&&逻辑与运算，如果第一个操作数被判定为假，系统不再判定或求解第二操作数。
对于||逻辑或运算，如果第一个操作数被判定为真，系统不再判定或求解第二操作数。
3.3.6逗号表达式
逗号运算符的优先级别最低，结合方向自左至右，其功能是把两个表达式连接起来组成一个表达式
3.3.7表达式中的类型转换
一种是隐式转换，一种是强制转换。
1.隐式转换
隐式转换发生在不同数据类型的量混合运算时，由编译系统自动完成。
隐式转换遵循以下规则：
(1)若参与运算量的类型不同,则先转换成同一类型,然后进行运算。若丢失精度丢失的部分按四舍五入向前舍入。
(2)转换按数据由低到高顺序执行，以保证精度不降低。
2.强制类型转换
强制类型转换是通过类型转换运算来实现的，其一般形式为：
（类型说明符）表达式
 *
 */
void Expression(){
    int result1 = 1+2-3*4/5;
    int result2 = 0;
    if(result1 > result2){
        result2 = 1;
    }else{
        result2 = 2;
    }
    int result3 = (1>2?1:2);
    int result4 = result1;
    bool result5 = (false && true)||(true && false);
    int a=1,b=2,c=3;
    long int result7 = result1;
    int result8 = (int)3.14;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
    cout<<result1<<endl;
}

